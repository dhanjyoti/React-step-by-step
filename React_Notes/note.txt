ReactJS ->
 is a declarative, efficient, and flexible JavaScript library for building
user interfaces. It is an open-source, component-based front-end library that is 
responsible only for the view layer of the application. ReactJS is not a framework, 
it is just a library developed by Facebook to solve some problems that we were 
facing earlier.


Props -> 
"props" is a shorthand for "properties," and it is a mechanism for passing data from a parent 
component to a child component. Props allow you to pass values, functions, or any data from 
one component to another, enabling communication between components in a React application.


Axios -> 
Axios is a popular JavaScript library used for making HTTP requests in both browser 
and Node.js environments. It provides a simple and straight forward way to send and 
receive HTTP requests, making it a valuable tool for working with web APIs and servers.


1. `useState`: This hook allows functional components to manage local state. It returns an
 array with the current state value and a function to update it.


2. `useEffect`: useEffect enables us to perform side effects in our functional components. 
It's commonly used for data fetching, DOM manipulation, or any operation that needs to occur 
after rendering.


3. `useContext`: useContext allows us to access the context data provided by the nearest 
Context Provider ancestor in the component tree.


4. `useReducer`: useReducer is often used as an alternative to useState when we have 
complex state logic. It manages state by dispatching actions to a reducer function.


5. `useMemo` and `useCallback`: These hooks are used for performance optimization by 
memoizing values and functions to prevent unnecessary re-computation.


6. `useRef`: useRef is used to create mutable references that persist across renders. 
It's often used to access and interact with DOM elements directly.