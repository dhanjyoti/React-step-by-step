### HTML ###

1. What is a DOM ?

->  The Document Object Model (DOM) is a programming interface for web documents. 
    It represents the structure of an HTML or XML document as a tree of objects, 
    and it allows scripts to interact with and manipulate the content and 
    structure of a webpage dynamically.

example:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DOM Example</title>
</head>
<body>
    <h1 id="mainTitle">Hello, DOM!</h1>
    <p id="demo">This is a simple webpage.</p>

    <script>
        // Accessing elements in the DOM
        var titleElement = document.getElementById("mainTitle");
        var demoElement = document.getElementById("demo");

        // Modifying content
        titleElement.textContent = "Welcome to the DOM!";
        demoElement.innerHTML = "This content has been updated.";

        // Creating a new element and appending it to the body
        var newParagraph = document.createElement("p");
        newParagraph.textContent = "This is a new paragraph.";
        document.body.appendChild(newParagraph);
    </script>
</body>
</html>
___________________________________________________________________________________

2. What is a difference between div and span ?

-> 1. `div` is a block-level container. 
                But `span` is inline-level container.
    2. `div` is typically used to group and structure content, creating a block-level 
        container that often separates sections of a webpage.
                But `span` is used to apply styles or scripting to a specific 
                portion of text within a block-level element.
    3. `div` usually starts on a new line and takes up the full width available.
                But `span` does not start on a new line and only takes up as much 
                width as necessary.
___________________________________________________________________________________

3. Can I have a multiple element with same ID. If No then Why ?

-> No, according to the HTML specification, IDs (identifiers) must be unique within 
    a page. Each element should have a unique ID to ensure that the document's 
    structure and elements can be reliably accessed and manipulated using 
    JavaScript and CSS.

    Having multiple elements with the same ID is considered invalid HTML and can 
    lead to unexpected behavior in scripts and styles. When we attempt to select 
    an element by its ID using JavaScript, the browser will typically return only 
    the first element with that ID, ignoring subsequent elements with the same ID.

                To uniquely identify and work with multiple elements, use classes 
    instead of IDs. Classes can be applied to multiple elements, and we can select 
    and manipulate them collectively or individually using JavaScript or CSS.
___________________________________________________________________________________

4. How do you specify a MetaData in HTML?

-> In HTML, metadata is often specified using the `<meta>` element, which provides 
    information about the HTML document. The `<meta>` element is placed within the 
    `<head>` section of the HTML document. 

    Example: 1. Character Set Encoding (UTF-8)
            2.  Viewport Configuration (for Responsive Design)
            3.  Setting the Page Title
            4.  Description and Keywords (for Search Engines)
            5.  Setting the Author and Copyright
            6.  Preventing Page Indexing by Search Engines
___________________________________________________________________________________

5. What is difference between document & Window object.

-> 1. The `window` object represents the browser window or the global context for 
        JavaScript execution.
                    But the `document` object represents the HTML document loaded in 
        the browser window.

    2.  `window` is the top-level object in the browser's hierarchy and serves as 
        the global object for JavaScript in a web page.
                    But `document` is a property of the window object and provides 
        an interface to interact with the content and structure of the document.

    3.  Properties and methods associated with the `window` object include things 
        like 'document', 'location', 'console', 'alert', and 'setTimeout'.
                    But properties and methods associated with the `document` object 
        include things like 'getElementById', 'querySelector', 'createElement', and 
        others used for DOM manipulation.
___________________________________________________________________________________

### CSS ###

1. What is Box Model ?

-> The Box Model in CSS is a fundamental concept that describes how elements on a 
web page are rendered and how their dimensions are calculated. It conceptualizes 
an HTML element as a rectangular box with four main components:

Content:
    The actual content of the element, such as text, images, or other media.
    It is defined by the width and height properties.

Padding:
    The transparent area around the content inside the element.
    Padding is specified using the padding property and its individual 
    components like padding-top, padding-right, padding-bottom, and padding-left.

Border:
    The boundary around the padding, separating the content from the next layer.
    The border is specified using the border property and its individual 
    components like border-width, border-style, and border-color.

Margin:
    The transparent area outside the border, creating space between the element 
    and its surrounding elements.
    Margin is specified using the margin property and its individual components 
    like margin-top, margin-right, margin-bottom, and margin-left.
___________________________________________________________________________________

2. What are the advantages of using CSS?

-> 1. It gives styling to the website, which makes the website look more beautiful.
    2. It makes our app responsive, making it usable in desktop, tab and mobile.
    3. We can provide animation and transition in our app making it more dynamic.

-> 1. Separation of Concerns:
        CSS separates the structure (HTML) and presentation (styling) of a web page. 
        This separation makes the code more modular, maintainable, and easier to 
        understand.

    Consistent Styling:
        CSS allows us to define styles in a central location and apply them 
        consistently across multiple pages. This ensures a cohesive and professional 
        look for the entire website.

    Easy Maintenance:
        Centralized styling makes it easier to update the look and feel of a website. 
        Changes to the design can be made in the CSS file without altering the HTML 
        structure.

    Responsive Design:
        CSS provides features like media queries and flexible layout options, 
        enabling the creation of responsive designs that adapt to different screen 
        sizes and devices.

    Reusability of Code:
        CSS classes and styles can be reused across different elements, reducing 
        redundancy and promoting a more efficient coding process.

    Improved Page Load Times:
        External CSS files can be cached by the browser, resulting in faster page 
        load times for subsequent visits to the site.

    Accessibility:
        CSS allows for the creation of accessible designs, making it easier to 
        implement features like proper heading structures, text alternatives for 
        images, and improved navigation for users with disabilities.

    Browser Compatibility:
        CSS helps in achieving a consistent appearance across different web 
        browsers. It provides ways to handle browser-specific issues and 
        inconsistencies.

    Animation and Transitions:
        CSS supports animations and transitions, allowing developers to create 
        visually engaging effects without relying on JavaScript or Flash.

    Print-Friendly Styles:
        Separate styles for print media can be defined using CSS, ensuring that 
        web pages are readable and presentable when printed.

    Flexibility and Control:
        CSS provides a high level of control over the layout, styling, and 
        positioning of elements on a web page, allowing developers to create 
        intricate designs.

    Maintainable Codebase:
        Well-organized and modular CSS code leads to a more maintainable 
        codebase, making it easier for multiple developers to collaborate on 
        a project.
___________________________________________________________________________________

3. What is diff between Display : none and Visible false.

->  1. When an element is set to `display: none`, it is entirely removed from the 
        document flow.
                    But when an element is set to `visibility: hidden`, it remains 
        in the document flow, but it is not visible.

    2. In `display: none` the element is not rendered, and it doesn't take up any 
        space on the page. 
                    But in `visibility: hidden` the element is still rendered, and 
        it takes up space on the page as if it were visible.
          
    3. In `display: none` child elements of the hidden element are also not rendered.
                    But in `visibility: hidden` child elements of the hidden element 
        are still rendered.

    4. In `display: none` property essentially hides the element and its content, 
        making it as if it doesn't exist on the page
                    But in `visibility: hidden` the property hides the element 
        visually while keeping its position in the layout.
___________________________________________________________________________________

4. What are the different types of Selectors in CSS?

-> 1. Universal Selector (`*`):
        Selects all elements on the page.
        Example: `* { color: blue; }`

    2.Type or Element Selector:
        Selects elements based on their HTML tag.
        Example: `p { font-size: 16px; }`

    3.Class Selector (`.class`):
        Selects elements based on their class attribute.
        Example: `.highlight { background-color: yellow; }`

    4.ID Selector (`#id`):
        Selects a single element based on its unique ID attribute.
        Example: `#header { font-family: 'Arial', sans-serif; }`

    5.Child Selector (`>`):
        Selects a direct child element.
        Example: `ul > li { list-style-type: square; }`

    6.Descendant Selector (whitespace):
        Selects an element that is a descendant of another specified element.
        Example: `article p { color: #333; }`

    7.Adjacent Sibling Selector (`+`):
        Selects an element that is directly adjacent to another specified element.
        Example: `h2 + p { font-style: italic; }`

    8.Attribute Selector:
        Selects elements based on the presence or value of their attributes.
        Example: `input[type="text"] { border: 1px solid #ccc; }`

    9.Pseudo-class Selector (`:pseudo-class`):
        Selects elements based on their state or position.
        Example: `a:hover { color: red; }`
    
    10.Pseudo-element Selector (`::pseudo-element`):
        Selects a specific part of an element.
        Example: `p::first-line { font-weight: bold; }`

    11.Grouping Selector:
        Groups multiple selectors to apply the same style to multiple elements.
        Example: `h1, h2, h3 { color: navy; }`
___________________________________________________________________________________

5. Difference between percentage and Pixel?

->  Pixel (px):
        1. Absolute Unit: Pixels are an absolute unit of measurement.
        2. Fixed Size: One pixel is a single dot on a screen, and the size of 
            elements specified in pixels remains constant regardless of the screen 
            size or resolution.
        Example: width: 200px;

    Percentage (%):
        1. Relative Unit: Percentages are relative units that are calculated 
            relative to the size of the parent container.
        2. Responsive: Using percentages allows for more responsive designs, as the 
            size is relative to the container's dimensions.
        Example: width: 50%;
___________________________________________________________________________________

6. What is the difference between logical tag and physical tag ?

-> 1. Logical Tag:
    *   "logical tag" may refer to semantic HTML elements that 
            describe the meaning or purpose of the content they enclose rather than 
            their visual presentation.
    *   Examples of logical tags include <header>, <nav>, <main>, <article>, 
            <section>, <aside>, <footer>, etc.
    *   Logical tags are designed to convey the structure and purpose of the content, 
            making the HTML more semantically meaningful.

    2. Physical Tag:
    *   "physical tag" might be used to refer to HTML elements that are 
            more presentational and describe how content should be styled or displayed.
    *   Examples of physical tags include <b> (bold), <i> (italic), <u> (underline), 
            <font>, etc.
    *   In modern web development, the use of physical tags is discouraged in favor 
            of CSS for styling, and the emphasis is on using logical, semantic HTML.
___________________________________________________________________________________
->  * Logical Properties and Values:
        Logical Properties: Introduced in modern CSS, logical properties are 
        designed to provide a more abstract and flexible way to describe layout and 
        styling that adapts to different writing modes 
        (e.g., left-to-right or right-to-left).

        Example: Instead of margin-left, you might use margin-inline-start, which 
        represents the start of the inline axis and adapts based on the writing mode.

    * Physical Properties and Values:
        Physical Properties: These are traditional CSS properties that describe 
        layout and styling based on the physical characteristics of the document, 
        such as left, right, top, bottom, margin-left, etc.

        Example: margin-left: 20px;, padding-top: 10px;
___________________________________________________________________________________













16. What are Async operations ?

-> Async operations in JavaScript refer to operations that are asynchronous, meaning 
    they don't block the execution of the program while waiting for a particular 
    task to complete. Asynchronous operations are crucial for handling tasks that 
    may take some time to finish, such as fetching data from a server, reading a 
    file, or waiting for user input.

    Key concepts related to async operations in JavaScript include:
    --Callback Functions, Promises, Async/Await, etc... 
___________________________________________________________________________________ 

17. What is a JavaScript prototype, and how does it relate to inheritance in JavaScript? 

-> In JavaScript, each object has a prototype, and the prototype is an object itself. 
    The prototype is used for inheritance, allowing one object to inherit properties 
    and methods from another object. 
___________________________________________________________________________________

18. How do you handle cross-origin requests in JavaScript, and what is the Same-Origin Policy?

-> Cross-Origin Requests:-
    Cross-Origin Requests occur when a web page makes a request for a resource from a 
    domain (origin) different from the one that served the web page. Browsers, by default, 
    follow the Same-Origin Policy, a security measure designed to prevent potentially 
    harmful interactions between different origins.

    To handle cross-origin requests, developers often use techniques like:
    1. CORS (Cross-Origin Resource Sharing):
    2. JSONP (JSON with Padding):
    3. Proxy Server:

   Same-Origin Policy (SOP):-
    The Same-Origin Policy restricts web pages from making requests to a different 
    domain than the one that served the web page. It applies to requests made via 
    JavaScript, and it includes restrictions on accessing certain properties and methods 
    of cross-origin resources.
___________________________________________________________________________________

19. Describe the differences between a shallow copy and a deep copy of objects and 
    arrays in JavaScript.

-> *   In Javascript when we assign an object to another object, there is no data copy of it, 
    it gets a reference copy. It means it copies the location of it, and what happens is 
    location of both the objects becomes same. Now if we change the variable of the second 
    object there will also be change in the variable of the first object. This is called 
    coping an object.
    This is coping through reference. Means coping of the memory.
    When we copy an object, the memory location of it is copied.

    Example-
                let obj={
                    name: 'dhan'
                };
                let user = obj;
                user.name = 'jyoti'
                console.log(obj)    

*   But coping of object happens through two types-
    1. coping by value  &
    2. coping by reference

*   When we copy a variable, the value of the variable is copied. This is coping by value.

    Example-
            let x = 'dhan';
            let y = x;
            y = 'jyoti';
            console.log(x);

*   But coping an object as a coping by reference, sometimes is not a good practice.
    Sometimes we don't want to change the whole object while coping it.
    To solve this problem we try to copy objects in different ways.
    Two ways to do so are Deep Copy & Shallow Copy.

    Shallow Copy-   A shallow copy of an object is a copy whose properties share the same 
        references (point to the same underlying values) as those of the source object from 
        which the copy was made. As a result, when you change either the source or the copy, 
        we may also cause the other object to change too.

        Shallow copy goes only one level down, it means that it copies the object but any
        nested object or arrays will still reference to same memory of original array.
    Example:-
            let obj = {
                name: "dhan"
            };
            //  let user = Object.assign({}, obj);  // or
            //  let user = {...obj};
            user.name = "Jyoti"

            console.log("Object is :", obj);
            console.log("User is :", user);

        Here the memory location is not copied, here the actual value is copied.

Imp Note:-    But if we have a nested object, shallow coping has an issue, again it will change the 
    value of the nested object. Neither Object.assign nor spread operator... will work here.

Note- Javascript by default create shallow copy of only non-primitive datatype, i,e- object &
    arrays. There is no shallow copy or deep copy for primitive datatypes in 
    javascript and primitive are immutable.

    Example:-
            let obj={
                name:'dhan',
                address:{
                    city:'Guwahati',
                    state:'Assam'
                }
            };
            let user = {...obj}
            user.address.city = "Shillong"

            console.log("Object is : ", obj)

*   Here comes the solution with the use of Deep Copy. 
    Meaning we need to make a copy of the nested objects as well.

    Deep Copy-  A deep copy of an object is a copy whose properties do not share the same references 
        (point to the same underlying values) as those of the source object from which the copy 
        was made. As a result, when you change either the source or the copy, you can be assured you're 
        not causing the other object to change too.
        
    To Deep Copy we convert the object into a string(i,e.- JSON.stringify). 
    And in the next copied object(which is string now) we again convert it into object(i,e-JSON.parse).

    Example:-
            let obj={
                name: 'Dhan',
                address:{
                    city:'Guwahati',
                    state:'Assam'
                }
            };
            let user = JSON.parse(JSON.stringify(obj));
            user.address.city = "Delhi"

            console.log("Object is : ", obj);
            console.log("User is : ", user);

But Deep copy has its own limitation.
    Firstly, there is no other way of deep coping apart from converting object 
    to string and again re-converting it into an object.
    Or else we need to make a function and manually create a new object, create its loop and make logic 
    to do so which is not recommended.

    Secondly, Deep Copy doesnot work with functions and Date.

    And unfortuntely there is no solution in javascript to solve these issues.

*   Lodash-> is one solution of this problem to us. We can install `lodash` library of node.js through
    npm i lodash & use it to solve this issue of Deep Copy.
    

# Difference between Shallow copy & Deep Copy

1. In Shallow Copy only the main object is copied, but in Deep Copy we copy the nested objects as well.
2. Shallow Copy stores the reference of objects to the original memory address, but Deep Copy stores 
    copies of the object's value.
3. Shallow Copy reflects changes made to the new/copied object in the original object, but Deep copy
    doesn't reflect changes made to the new/copied object in the original object.
4. Shallow Copy stores the copy of the original object and points the references to the objects. But, 
    Deep Copy stores the copy of the original object and recursively copies the objects as well.
5. A shallow copy is faster. But, Deep Copy is comparetively slower.`
___________________________________________________________________________________

20. Question--- Call this api and show the result
            API - https://gorest.co.in/public/v2/users

-> Code: In html 

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>API Request Example</title>
        </head>
        <body>
            <h1>API Response:</h1>
            <pre id="apiResponse"></pre>

            <script>
                // Make a GET request to the API
                fetch('https://gorest.co.in/public/v2/users')
                    .then(response => response.json())
                    .then(data => {
                        // Display the API response in the HTML
                        document.getElementById('apiResponse').textContent = JSON.stringify(data, null, 2);
                    })
                    .catch(error => console.error('Error:', error));
            </script>
        </body>
        </html>

Code: In JavaScript 

        fetch('https://gorest.co.in/public/v2/users')
        .then(response => response.json())
        .then(data => {
            // Display the API response in the console
            console.log(data);
        })
        .catch(error => console.error('Error:', error));

        Async ->
            async function fetchData(){
                try{
                    const response = await fetch('https://gorest.co.in/public/v2/users');
                    if(!response.ok){
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const data = await response.json();
                    console.log(data)
                    document.getElementById('apiResponse').innerHTML = data.map((d)=>{
                        return (`
                        <div>${d.id}</div>
                        <div>${d.name}</div>
                        <div>${d.email}</div>`)
                    });    
                } catch(error){
                    console.error("Error:", error);
                }
            }
            fetchData();
___________________________________________________________________________________

22. Event Loop:- Event Loop is a continuous process that handles the execution of code, 
    ensuring that tasks are processed efficiently in a non-blocking and asynchronous way. 
                    It is a critical part of JavaScript's concurrency model and is 
    responsible for managing tasks such as handling user interactions, making network 
    requests, and processing events.
___________________________________________________________________________________

23. How does the JavaScript event loop work, and what is the role of the call stack, 
callback queue, and microtask queue?

-> The JavaScript event loop is a crucial mechanism that handles asynchronous operations 
    in the language. Here's a brief explanation of how it works, including the roles of 
    the call stack, callback queue, and microtask queue:

1. Call Stack:
    The call stack is a data structure that records where in the program we are. It keeps 
    track of function calls. When a function is invoked, it's added to the top of the stack.
    When a function completes, it's removed from the stack.

2. Callback Queue (Task Queue):
    The callback queue, also known as the task queue, holds messages (functions) to be 
    processed. These messages are added to the queue when an asynchronous operation 
    completes or when an event occurs.

3. Microtask Queue:
    The microtask queue holds tasks that are higher-priority than the regular callback 
    queue tasks. Microtasks are usually used for promises and mutation observer callbacks.

4. MutationObserver:
    The MutationObserver interface provides the ability to watch for changes being made to 
    the DOM tree. It is designed as a replacement for the older Mutation Events feature, 
    which was part of the DOM3 Events specification.

    ### Event Loop Process: ###

1. Execute Synchronous Code:
    The JavaScript engine starts by executing any synchronous code it finds. Functions are 
    added to the call stack and executed in a first-in, last-out order.

2. Handle Asynchronous Operations:
    When an asynchronous operation (e.g., a setTimeout, AJAX request, or event listener) 
    is encountered, it's offloaded to the browser's APIs, and the engine continues executing 
    the remaining synchronous code.

3. Callback Queue and Microtask Queue:
    When an asynchronous operation completes or an event occurs, a callback (function) is 
    added to the callback queue or microtask queue, depending on the type of task.

4. Event Loop:
    The event loop continually checks the call stack. If it's empty, it takes the first 
    task from the microtask queue and moves it to the call stack. Microtasks are given 
    priority and are processed before regular tasks.

5. Repeat:
    The process repeats, with the event loop continuously checking the call stack and 
    moving tasks from the callback queue or microtask queue to the call stack as needed.

Example:
                console.log('Start');

                setTimeout(function() {
                console.log('Timeout callback');
                }, 0);

                Promise.resolve().then(function() {
                console.log('Promise resolved');
                });

                console.log('End');

Output:
                Start
                End
                Promise resolved
                Timeout callback

The JavaScript event loop ensures that asynchronous operations are handled efficiently, 
with the call stack, callback queue, and microtask queue working together to manage the 
flow of code execution. The event loop continuously checks for available tasks, 
prioritizing microtasks over regular tasks, and ensures that the program remains 
responsive and non-blocking.
___________________________________________________________________________________

24. What are the types of framework in javascript?

->

25. What is prototype?
-> Prototype inheritance in javascript is the linking of prototypes of a parent object 
    to a child object to share and utilize the properties of a parent class using a child 
    class. 


26. Throttling and Debouncing
->  Debounce is most suitable for control events like typing or button clicks.
If the user triggers a new event during that time, the time will be reset.


Throttle is most suitable for continuous user events like resizing and scrolling.
Instead of delaying, it invokes the callback function at regular intervals 
as long as the event trigger is active.
___________________________________________________________________________________

27. Accessibility of a website.
->

28.  What are polyphils in js ?
-> 

networking questions-

- computer networks, 7 OSI layers, DBMS - asset properties, normalization & 
de-normalization forms, OS, Raise condition, System design - high - low - scalability,

youtube -> Gaurav Sen - System Design

