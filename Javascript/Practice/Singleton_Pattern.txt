Understanding the Singleton Pattern:-
    The Singleton Pattern ensures that a class can only have a single instance 
    throughout the lifetime of an application. By restricting the instantiation 
    of a class to one object, we can ensure that shared resources or data are 
    managed consistently across different parts of your application.

Implementing the Singleton Pattern:-
    Here’s a simple example demonstrating the implementation of the Singleton 
    Pattern in JavaScript:

        //    const Singleton = (function () {
        //    let instance;

        code:
        function createInstance() {
            return {
            message: "I am the only instance!",
            showMessage: function () {
                console.log(this.message);
            },
            };
        }
        return {
            getInstance: function () {
            if (!instance) {
                instance = createInstance();
            }
            return instance;
            },
        };
        })();
        const singleton1 = Singleton.getInstance();
        const singleton2 = Singleton.getInstance();
        console.log(singleton1 === singleton2); // true

In this example, we create an immediately-invoked function expression (IIFE) that 
serves as our Singleton. Inside the IIFE, we define a private variable instance 
and a private function createInstance(). The getInstance() method creates a 
new instance of the object if it doesn't already exist or returns the existing 
instance.

Benefits of the Singleton Pattern:-
    1. Resource management: The Singleton Pattern ensures that resources or 
        shared data are managed consistently across different parts of your 
        application.
    2. Global access: By providing a global point of access to the Singleton 
        instance, you can easily reference the object from different parts of 
        your code.
    3. Unique instance: Ensuring that only one instance of a class exists 
        prevents duplicate instances and potential conflicts.

When to Use the Singleton Pattern:-
    The Singleton Pattern is ideal for managing shared resources like configuration 
    data, caches, or connection pools. It’s also useful for ensuring that specific 
    services or components within your application maintain a single instance, 
    improving consistency and reducing potential conflicts.
