1. What is a DOM ?
->  The Document Object Model (DOM) is a programming interface for web documents. 
    It represents the structure of an HTML or XML document as a tree of objects, 
    and it allows scripts to interact with and manipulate the content and 
    structure of a webpage dynamically.
___________________________________________________________________________________

2. What is a difference between between div and span ?
->  1. `div` a block-level container. 
                But `span` is inline-level container.
    2. `div` is typically used to group and structure content, creating a block-level 
        container that often separates sections of a webpage.
                But `span` is used to apply styles or scripting to a specific 
                portion of text within a block-level element.
    3. `div` is usually starts on a new line and takes up the full width available.
                But `span` does not start on a new line and only takes up as much 
                width as necessary.
___________________________________________________________________________________

3. MetaData-> This is an HTML element used to provide metadata about the HTML 
document. Metadata is information about the document that isn't displayed on the 
web page but provides important information for web browsers and search engines.
___________________________________________________________________________________

4. What is difference between document & Window object.
->  1. The `window` object represents the browser window or the global context for 
        JavaScript execution.
                    But the `document` object represents the HTML document loaded in 
        the browser window.
    2.  `window` is the top-level object in the browser's hierarchy and serves as 
        the global object for JavaScript in a web page.
                    But `document` is a property of the window object and provides 
        an interface to interact with the content and structure of the document.
    3.  Properties and methods associated with the `window` object include things 
        like 'document', 'location', 'console', 'alert', and 'setTimeout'.
                    But properties and methods associated with the `document` object 
        include things like 'getElementById', 'querySelector', 'createElement', and 
            others used for DOM manipulation.
___________________________________________________________________________________

### CSS ###

1. What are the different types of Selectors in CSS?
-> 1. Universal Selector (`*`):
        Selects all elements on the page.
        Example: `* { color: blue; }`

    2.Type or Element Selector:
        Selects elements based on their HTML tag.
        Example: `p { font-size: 16px; }`

    3.Class Selector (`.class`):
        Selects elements based on their class attribute.
        Example: `.highlight { background-color: yellow; }`

    4.ID Selector (`#id`):
        Selects a single element based on its unique ID attribute.
        Example: `#header { font-family: 'Arial', sans-serif; }`

    5.Descendant Selector (whitespace):
        Selects an element that is a descendant of another specified element.
        Example: `article p { color: #333; }`

    6.Child Selector (`>`):
        Selects a direct child element.
        Example: `ul > li { list-style-type: square; }`

    7.Adjacent Sibling Selector (`+`):
        Selects an element that is directly adjacent to another specified element.
        Example: `h2 + p { font-style: italic; }`

    8.Attribute Selector:
        Selects elements based on the presence or value of their attributes.
        Example: `input[type="text"] { border: 1px solid #ccc; }`

    9.Pseudo-class Selector (`:pseudo-class`):
        Selects elements based on their state or position.
        Example: `a:hover { color: red; }`
    
    10.Pseudo-element Selector (`::pseudo-element`):
        Selects a specific part of an element.
        Example: `p::first-line { font-weight: bold; }`

    11.Grouping Selector:
        Groups multiple selectors to apply the same style to multiple elements.
        Example: `h1, h2, h3 { color: navy; }`
___________________________________________________________________________________

### Javascript ###

1. Difference between `null` and `undefined`.
->  In JavaScript, null is an assignment value that represents no value or no object. 
    It is an intentional absence of any object value. On the other hand, undefined 
    is a type itself and represents a variable that has been declared but has not 
    yet been assigned a value.
___________________________________________________________________________________

2. Explain Hoisting in JavaScript.
-> Hoisting -> Hoisting is phenomina in Javascrpt by which we can access variables 
    and functions, even before we initialize it or we have put some value in it.
    We can access the variables without any error.  

Eg: In case of single variable the output will be undefined. 
    In case of proper function declaration it will show us the result. 
    in case of only function name without the paranthesis
    it will show us the whole function code.
    In case the function is an arrow function it will give us
    an error "_____ is not a function". As arrow function behaves
    just like a variable. & undefined is the result if we pass only 
    the name just like another variable.

                Hoisting is a mechanism in JavaScript where variable and function 
    declarations are moved to the top of their containing scope during the 
    compilation phase. However, only the declarations are hoisted, not the 
    initializations.
___________________________________________________________________________________

3. Explain Implicit Type Coercion in javascript.
-> Implicit type coercion in JavaScript refers to the automatic conversion of one 
    data type to another without the explicit involvement of the programmer. This 
    behavior occurs during certain operations or comparisons involving different 
    data types. JavaScript attempts to make sense of the operation by converting 
    one or more values to a common type.

Example:        String and Number Concatenation:
                var result = "5" + 3; // Result is the string "53"
___________________________________________________________________________________

4. Explain passed by value and passed by reference.
-> In programming, the terms "passed by value" and "passed by reference" refer to 
    how arguments are transferred to functions and methods. These concepts are 
    crucial in understanding how data is manipulated in a programming language.

    1. Passed by Value:

    * In a "passed by value" mechanism, the actual value of the variable is passed 
        to the function or method.
    * The function receives a copy of the variable's value, and any changes made to 
        the parameter inside the function do not affect the original variable outside 
        the function.
    * This is typical for primitive data types such as numbers, strings, and booleans.

Example (in JavaScript):

                function increment(num) {
                num = num + 1;
                }

                let count = 5;
                increment(count);
                console.log(count); // Output: 5 (unchanged)

    2. Passed by Reference:

    * In a "passed by reference" mechanism, the memory address (reference) of the 
        variable is passed to the function or method.
    * Any changes made to the parameter inside the function affect the original 
        variable outside the function because they both point to the same memory 
        location.
    * This is typical for non-primitive data types such as objects and arrays.

Example (in JavaScript):

                function addItem(arr, item) {
                    arr.push(item);
                }

                let myArray = [1, 2, 3];
                addItem(myArray, 4);
                console.log(myArray); // Output: [1, 2, 3, 4] (modified)
___________________________________________________________________________________

5. What is immediately invoked function?
-> An Immediately Invoked Function Expression (IIFE) is a common JavaScript pattern 
    where a function is defined and executed immediately after its creation. This 
    pattern helps create a private scope for variables, preventing them from 
    polluting the global scope. The syntax involves wrapping the function in 
    parentheses and invoking it immediately.

    Here's the basic structure of an IIFE:

                (function() {
                    // code inside this function is executed immediately
                })();

    You can also pass arguments to an IIFE:

                (function(x, y) {
                    console.log(x + y);
                })(3, 5); // Outputs: 8

    Key features of IIFE:
    1. Encapsulation: Variables declared inside the IIFE are not accessible from 
        the outside, providing a way to create private variables.
    2. Avoiding Global Scope Pollution: Since the variables and functions inside 
        the IIFE are not added to the global scope, they don't interfere with 
        other scripts or libraries.
    3. Immediate Execution: The function is executed immediately after it's 
        defined, allowing us to perform tasks or initialize values right away.
___________________________________________________________________________________

6. Difference between `for in` loop and `for of` loop.
-> In JavaScript, the `for...in` loop and the `for...of` loop are both used for 
    iterating over elements, but they have some key differences.

`for...in` Loop:
    The `for...in` loop is used to iterate over the enumerable properties of an object. 
    It works with objects, arrays, and other iterable entities.

                for (variable in object) {
                    // code to be executed
                }

    Here, `variable` is a variable that will be assigned the property name on each 
    iteration, and `object` is the object being iterated.

    Example:
                const obj = { a: 1, b: 2, c: 3 };

                for (let key in obj) {
                    console.log(key, obj[key]);
                }

`for...of` Loop:
    The `for...of` loop is introduced in ECMAScript 2015 (ES6) and is used to iterate 
    over the values of an iterable object such as an array, string, map, set, etc.

                for (variable of iterable) {
                    // code to be executed
                }

    Here, `variable` is a variable that will be assigned the value of the next element 
    in the `iterable`.

    Example:
                const arr = [1, 2, 3];

                for (let value of arr) {
                    console.log(value);
                }

                ### Differences: ###

Object Iteration:
    for...in is used to iterate over the enumerable properties of an object.
    for...of is used to iterate over the values of an iterable object.

Order of Iteration:
    for...in does not guarantee a specific order for the properties of an object. 
        The order may vary based on the JavaScript engine.
    for...of guarantees the order of iteration based on the iterable's 
        implementation. For arrays, it's in the order of array elements.

Iterables:
    for...in can be used with any object, as it iterates over the object's 
        properties.
    for...of is specifically designed for iterating over iterable objects like 
        arrays, strings, maps, sets, etc.

Additional Properties:
    for...in may iterate over properties inherited from the object's prototype 
        chain.
    for...of iterates only over the values in the iterable and does not iterate 
        over inherited properties.

Performance:
    for...in may be less performant than for...of due to its ability to iterate 
    over inherited properties and the potential for slower property access.

                    In general, for...of is often preferred for iterating over 
arrays and other iterable objects, while for...in is typically used for iterating 
over the properties of an object.
___________________________________________________________________________________

7. Explain Higher Order Functions in javascript.
-> Higher-order functions in JavaScript are functions that operate on other 
    functions by taking them as arguments or returning them. In other words, a 
    higher-order function either takes one or more functions as arguments or 
    returns a new function.

    Here are the two main characteristics of higher-order functions:

    1. Takes a Function as an Argument:
        A higher-order function can accept another function as an argument.

                function higherOrderFunction(callback) {
                    // Do something
                    callback();
                }

                function myCallback() {
                    console.log("Callback executed!");
                }

                higherOrderFunction(myCallback);

    2. Returns a Function:
        A higher-order function can also return a new function.

                function higherOrderFunction() {
                    // Returns a new function
                    return function() {
                        console.log("Returned function executed!");
                    };
                }

                const returnedFunction = higherOrderFunction();
                returnedFunction();
___________________________________________________________________________________

8. What is callback?
-> We can take a function and pass it into another function, and when we do so, this 
    function which we pass into another function is known as callback function.
                    As we know Javascript is a synchronous and single-threaded 
    language, but due to callback we can do asynhcronous thing in javascript.

Example:

setTimeout(function () {    // This function that we first pass as a parameter to the setTimeOut 
    console.log("timer");   // is a callback function.
}, 4000);      

function x(y){
    console.log("x");
    y();
}
x(function y(){             //  Giving the responsibility of this function to another function.  
    console.log("y");
})

Output: x y timer(after 4sec)
___________________________________________________________________________________

9. What is closure?
-> A function along with a reference to it's outer environment, together forms a 
    closure. In other words, closure is a combination of a function and its lexical 
    scope bundled together forms a closure.
___________________________________________________________________________________

10. What is promise? Write a code for promise.
-> A Promise in JavaScript represents the eventual result of an asynchronous operation. 
    It is an object that may produce a single value at some point in the future. 
    
    A Promise is in one of three states:
    1.  Pending: The initial state; neither fulfilled nor rejected.
    2.  Fulfilled: The operation completed successfully, and the Promise has a 
        resulting value.
    3.  Rejected: The operation failed, and the Promise has a reason for the failure.

A Promise is said to be "settled" if it is either fulfilled or rejected.

Code Example:

            const myPromise = new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve("Promise resolved");
            }, 1000);
            });

            myPromise.then((message) => {
            console.log(message);
            }).catch((error) => {
            console.log(error);
            });

Intuition: Think of a Promise as a contract between two parties. One party promises 
to deliver a result in the future (resolve) or provide a reason why they 
couldn't (reject). The other party can then decide what to do based on whether the 
promise was fulfilled or rejected.
___________________________________________________________________________________

11. What are non-primitive data type?
-> Non-primitive data types, also known as reference types, are data types in 
    programming languages that are not directly represented as a single, simple value. 

    Example:
    objects, array, functions, etc...
___________________________________________________________________________________

12. What is `addEventListner`?
->  `addEventListener` is a method in JavaScript that allows us to attach an event 
    handler function to an HTML element. An event handler is a function that gets 
    executed in response to a specific event occurring on an HTML element, such as a 
    click, mouseover, keypress, etc.

    Example:
    element.addEventListener(event, function, options);
___________________________________________________________________________________

13. What is event bubbling?
-> Event bubbling is a phase in the event flow in the Document Object Model (DOM) 
    where an event triggered on a specific element propagates (or bubbles) upward 
    through its ancestors in the DOM hierarchy. This means that if an event occurs 
    on a nested element within the DOM, the same event will also be triggered on 
    each of its ancestor elements, in order, until it reaches the root of the 
    document.

    Example:
    html:
            <div id="outer">
                <div id="middle">
                    <button id="inner">Click me</button>
                </div>
            </div>
___________________________________________________________________________________

14. What is event delegation, and why is it useful in JavaScript? Provide an example.

-> Event delegation is a JavaScript programming pattern where we use a single event 
    listener to manage all the events for a particular type on a parent element, 
    rather than setting up individual event listeners on each child element. This is 
    achieved by taking advantage of event bubbling, where events on nested elements 
    propagate up to their ancestors.

Event delegation is useful for the following reasons:
    1. Efficiency: It reduces the number of event listeners in our code, which can 
        improve performance, especially when dealing with a large number of elements.

    2. Dynamic Content: It works well with dynamically added or removed elements, 
        as the event listener is attached to a parent that exists when the page loads.

    3. Simpler Code: It often leads to cleaner and more maintainable code since we 
        don't need to manage individual event listeners for each child element.

    Example:
            <ul id="itemList">
                <li>Item 1</li>
                <li>Item 2</li>
                <li>Item 3</li>
            </ul>

            <script>
                // Event delegation
                document.getElementById('itemList').addEventListener('click', function(event) {
                    if (event.target.tagName === 'LI') {
                        // The clicked element is an <li> element
                        console.log('Clicked on:', event.target.textContent);
                    }
                });
            </script>
___________________________________________________________________________________

15. What are Async operations ?
-> Async operations in JavaScript refer to operations that are asynchronous, meaning 
    they don't block the execution of the program while waiting for a particular 
    task to complete. Asynchronous operations are crucial for handling tasks that 
    may take some time to finish, such as fetching data from a server, reading a 
    file, or waiting for user input.

    Key concepts related to async operations in JavaScript include:
    --Callback Functions, Promises, Async/Await, etc... 
___________________________________________________________________________________

16. What is Bind?
-> Bind :- In JavaScript, the bind method is used to create a new function that, 
when invoked, sets a specific context (the value of this) for that function. 
This allows you to control what this refers to when the function is executed. 
The original function remains unchanged.

Explain: 
        const obj = { value: 42 };

        function getValue() {
            return this.value;
        }

        const boundFunction = getValue.bind(obj);
        console.log(boundFunction()); // Outputs 42
___________________________________________________________________________________

17. Debouncing & Throttling.
-> Throttling-> is useful when you want to ensure that a function 
    is called at a limited rate or frequency, without missing 
    any important inputs or events. 

Debouncing-> delays the execution of a function until after a 
    certain amount of time has passed without the input being
    triggered again.  

----Difference between debouncing and throttling in javascript----

Debouncing and throttling are both techniques used in JavaScript to control 
the rate at which a function is executed, especially in response to events 
that can happen frequently. While they share the goal of preventing 
functions from being executed too often, there are key differences between 
debouncing and throttling:

1. Execution Timing:
    Debouncing: Delays the execution of a function until after a specified 
        period of inactivity. If the triggering event occurs multiple times 
        within the debounce delay, the function is only executed once, 
        after the last occurrence of the event.
    Throttling: Ensures that a function is not executed more frequently than 
        a specified time interval. If the triggering event occurs more often 
        than the throttle interval, the function is still executed at a 
        controlled rate.

1. Function Execution:
    Debouncing: The function is executed only once, and that's after the 
        debounce delay has passed since the last occurrence of the event. 
        This is useful when you want the function to be invoked only after 
        the user has stopped a continuous action (e.g., typing or scrolling).
    Throttling: The function is executed periodically, according to the 
        specified time interval. Even if the event occurs more frequently, 
        the function is allowed to execute at a controlled rate.

2. Use Cases:
    Debouncing: Useful when we want to ensure that a function is only 
        executed after a period of inactivity following the last occurrence 
        of an event. Examples include search suggestions or form validation 
        after the user stops typing.
    Throttling: Useful when we want to limit the rate of execution of a 
        function, especially for events that can occur rapidly (e.g., scrolling, 
        mouse movement).

3. Timing Control:
    Debouncing: Delays the execution of the function, resetting the delay 
        each time the event occurs. The function is executed only when 
        there is a pause in the events.
    Throttling: Executes the function periodically, ensuring that it is 
        invoked at a controlled rate, even if the events continue to occur.

4. Implementation:
    Debouncing: Often implemented using setTimeout and clearTimeout to 
        introduce a delay before the function is executed.
    Throttling: Often implemented using a timer and a flag to control the 
        rate of function execution.

Here's a simplified example of debouncing and throttling functions:

                    Example code- 

        // Debouncing function
        function debounce(func, delay) {
            let timer;
            return function() {
                clearTimeout(timer);
                timer = setTimeout(() => func.apply(this, arguments), delay);
            };
        }

        // Throttling function
        function throttle(func, interval) {
            let isThrottled = false;
            return function() {
                if (!isThrottled) {
                    func.apply(this, arguments);
                    isThrottled = true;
                    setTimeout(() => (isThrottled = false), interval);
                }
            };
        }

In summary, debouncing delays the execution until a period of inactivity, 
while throttling controls the rate of execution to a specific interval,
allowing periodic invocations. The choice between debouncing and throttling 
depends on the specific use case and desired behavior.
___________________________________________________________________________________

18. How do you handle cross-origin requests in JavaScript, and what is the 
    Same-Origin Policy?
->  The Same-Origin Policy is a security measure implemented by web browsers to 
    prevent web pages from making requests to a different domain than the one that 
    served the original web page. The policy helps to protect users from 
    potentially malicious actions, such as cross-site request forgery and other 
    types of attacks.

    Handling Cross-Origin Requests in JavaScript:
    Despite the Same-Origin Policy restrictions, there are several ways to handle 
    cross-origin requests in JavaScript:

    1. CORS (Cross-Origin Resource Sharing):
        CORS is a mechanism that enables servers to declare which origins are 
        permitted to access their resources. Servers include specific HTTP headers 
        (such as Access-Control-Allow-Origin) in their responses to indicate which 
        origins are allowed.

    2. JSONP (JSON with Padding):
        JSONP is a technique that involves dynamically adding a <script> tag to 
        the DOM with a source URL pointing to a different domain. The server on 
        that domain then wraps the response in a callback function, allowing the 
        browser to execute the script.
    
    3. Server-Side Proxy:
        A server-side proxy involves making requests to the same domain from the 
        client-side code, and then the server, which is not bound by the 
        Same-Origin Policy, makes the actual cross-origin request.

    4. Credentials and Cookies:
        When making cross-origin requests with credentials (e.g., using the fetch 
        API with credentials: 'include'), the server must also include the 
        Access-Control-Allow-Credentials header and set it to true.
___________________________________________________________________________________

19. What is a JavaScript prototype, and how does it relate to inheritance in JavaScript?
->  In JavaScript, the prototype is an internal, hidden property associated with 
    every object. It is used for inheritance and is part of the prototype chain. 
    Each object can have a prototype, and this forms a chain of objects, commonly 
    referred to as the "prototype chain."

    Relation to inheritance:
        The prototype in JavaScript is a mechanism that allows objects to inherit 
        properties and methods from other objects. Through the prototype chain, 
        objects can share and reuse functionality, enabling a form of inheritance in 
        the language. This prototype-based approach to inheritance is a fundamental 
        aspect of JavaScript's object-oriented programming model.
___________________________________________________________________________________

20. How does the JavaScript event loop work, and what is the role of the call stack, 
        callback queue, and microtask queue?

-> The JavaScript event loop is a crucial mechanism that handles asynchronous 
    operations in the language. Here's a brief explanation of how it works, 
    including the roles of the call stack, callback queue, and microtask queue:

1. Call Stack:
    The call stack is a data structure that records where in the program we are. 
    It keeps track of function calls. When a function is invoked, it's added to 
    the top of the stack. When a function completes, it's removed from the stack.

2. Callback Queue (Task Queue):
    The callback queue, also known as the task queue, holds messages (functions) 
    to be processed. These messages are added to the queue when an asynchronous 
    operation completes or when an event occurs.

3. Microtask Queue:
    The microtask queue holds tasks that are higher-priority than the regular 
    callback queue tasks. Microtasks are usually used for promises and mutation 
    observer callbacks.
___________________________________________________________________________________
### Fetch an API data ###

        fetch('https://gorest.co.in/public/v2/users')
        .then(response => response.json())
        .then(data => {
            // Display the API response in the console
            console.log(data);
        })
        .catch(error => console.error('Error:', error));
___________________________________________________________________________________